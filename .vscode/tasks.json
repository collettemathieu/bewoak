{
    "tasks": [
        {
            "args": ["nx", "build", "pathway-design-server"],
            "command": "bun",
            "group": "build",
            "label": "build-pathway-design-server",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "clear": false,
                "echo": true,
                "focus": false,
                "panel": "shared",
                "reveal": "always",
                "showReuseMessage": true
            },
            "problemMatcher": [],
            "type": "shell"
        },
        {
            "args": [
                "-c",
                "echo 'üß™ Validating Bun build + Node.js runtime compatibility...' && bun nx build pathway-design-server && echo '‚úÖ Build successful with Bun' && node dist/apps/pathway-design-server/main.js & NODE_PID=$! && sleep 2 && echo '‚úÖ Node.js runtime started' && kill $NODE_PID 2>/dev/null || true && echo 'üéâ Compatibility validated!'"
            ],
            "command": "bash",
            "group": "test",
            "label": "test-runtime-compatibility",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "focus": true,
                "panel": "new",
                "reveal": "always"
            },
            "type": "shell"
        },
        {
            "args": [
                "run",
                "-e",
                "import { readdirSync, readFileSync, writeFileSync, statSync } from 'fs'; import { join } from 'path'; function sortJsonFiles(dir) { const items = readdirSync(dir); for (const item of items) { const fullPath = join(dir, item); const stat = statSync(fullPath); if (stat.isDirectory() && !['node_modules', 'dist', '.nx', '.git', 'coverage', 'tmp'].includes(item)) { sortJsonFiles(fullPath); } else if (item.endsWith('.json') && !item.includes('lockb')) { try { const content = readFileSync(fullPath, 'utf8'); const parsed = JSON.parse(content); const sorted = JSON.stringify(parsed, null, 2) + '\\n'; writeFileSync(fullPath, sorted); console.log(`‚úÖ Sorted: ${fullPath}`); } catch (e) { console.log(`‚ö†Ô∏è  Skipped: ${fullPath} (${e.message})`); } } } } sortJsonFiles('.');"
            ],
            "command": "bun",
            "group": "build",
            "label": "sort-all-json-files",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "presentation": {
                "echo": true,
                "focus": true,
                "panel": "new",
                "reveal": "always"
            },
            "problemMatcher": [],
            "type": "shell"
        }
    ],
    "version": "2.0.0"
}
